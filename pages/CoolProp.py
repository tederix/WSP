import streamlit as st
import CoolProp.CoolProp as CP
from WSP import Vers

st.set_page_config(page_title="CoolProp", page_icon="üí¶")

# –≤–µ—â–µ—Å—Ç–≤–∞
Sub = {'1-Butene / 1-–ë—É—Ç–µ–Ω': ('1-Butene', 50000000.0, 525.0),
       'Acetone / –ê—Ü–µ—Ç–æ–Ω': ('Acetone', 700000000.0, 550.0),
       'Air / –í–æ–∑–¥—É—Ö': ('Air', 2000000000.0, 2000.0),
       'Ammonia / –ê–º–º–∏–∞–∫': ('Ammonia', 1000000000.0, 725.0),
       'Argon / –ê—Ä–≥–æ–Ω': ('Argon', 1000000000.0, 2000.0),
       'Benzene / –ë–µ–Ω–∑–æ–ª': ('Benzene', 500000000.0, 725.0),
       'CarbonDioxide / –î–∏–æ–∫—Å–∏–¥ —É–≥–ª–µ—Ä–æ–¥–∞': ('CarbonDioxide', 800000000.0, 2000.0),
       'CarbonMonoxide / –ú–æ–Ω–æ–æ–∫—Å–∏–¥ —É–≥–ª–µ—Ä–æ–¥–∞': ('CarbonMonoxide', 100000000.0, 500.0),
       'CarbonylSulfide / –ö–∞—Ä–±–æ–Ω–∏–ª—Å—É–ª—å—Ñ–∏–¥': ('CarbonylSulfide', 50000000.0, 650.0),
       'CycloHexane / –¶–∏–∫–ª–æ–≥–µ–∫—Å–∞–Ω': ('CycloHexane', 250000000.0, 700.0),
       'CycloPropane / –¶–∏–∫–ª–æ–ø—Ä–æ–ø–∞–Ω': ('CycloPropane', 28000000.0, 473.0),
       'Cyclopentane / –¶–∏–∫–ª–æ–ø–µ–Ω—Ç–∞–Ω': ('Cyclopentane', 250000000.0, 550.0),
       'D4 / –û–∫—Ç–∞–º–µ—Ç–∏–ª—Ü–∏–∫–ª–æ—Ç–µ—Ç—Ä–∞—Å–∏–ª–æ–∫—Å–∞–Ω': ('D4', 180000000.0, 1200.0),
       'D5 / –î–µ–∫–∞–º–µ—Ç–∏–ª—Ü–∏–∫–ª–æ–ø–µ–Ω—Ç–∞—Å–∏–ª–æ–∫—Å–∞–Ω': ('D5', 120000000.0, 630.0),
       'D6 / –î–æ–¥–µ–∫–∞–º–µ—Ç–∏–ª—Ü–∏–∫–ª–æ–ø–µ–Ω—Ç–∞—Å–∏–ª–æ–∫—Å–∞–Ω': ('D6', 30000000.0, 673.0),
       'Deuterium / –î–µ–π—Ç–µ—Ä–∏–π': ('Deuterium', 2000000000.0, 600.0),
       'Dichloroethane / 1,2-–î–∏—Ö–ª–æ—Ä—ç—Ç–∞–Ω': ('Dichloroethane', 1000000000.0, 1000.0),
       'DiethylEther / –î–∏—ç—Ç–∏–ª–æ–≤—ã–π —ç—Ñ–∏—Ä': ('DiethylEther', 100000000.0, 548.0),
       'DimethylCarbonate / –î–∏–º–µ—Ç–∏–ª–∫–∞—Ä–±–æ–Ω–∞—Ç': ('DimethylCarbonate', 60000000.0, 600.0),
       'DimethylEther / –î–∏–º–µ—Ç–∏–ª–æ–≤—ã–π —ç—Ñ–∏—Ä': ('DimethylEther', 50000000.0, 525.0),
       'Ethane / –≠—Ç–∞–Ω': ('Ethane', 900000000.0, 675.0),
       'Ethanol / –≠—Ç–∞–Ω–æ–ª': ('Ethanol', 280000000.0, 650.0),
       'EthylBenzene / –≠—Ç–∏–ª–±–µ–Ω–∑–æ–ª': ('EthylBenzene', 60000000.0, 700.0),
       'Ethylene / –≠—Ç–∏–ª–µ–Ω': ('Ethylene', 300000000.0, 450.0),
       'EthyleneOxide / –û–∫–∏—Å—å —ç—Ç–∏–ª–µ–Ω–∞': ('EthyleneOxide', 1000000000.0, 1000.0),
       'Fluorine / –§—Ç–æ—Ä': ('Fluorine', 20000000.0, 300.0),
       'HFE143m / RE143A': ('HFE143m', 7200000.0, 420.0),
       'HeavyWater / –¢—è–∂—ë–ª–∞—è –≤–æ–¥–∞': ('HeavyWater', 1200000000.0, 825.0),
       'Helium / –ì–µ–ª–∏–π': ('Helium', 1000000000.0, 2000.0),
       'Hydrogen / –í–æ–¥–æ—Ä–æ–¥': ('Hydrogen', 2000000000.0, 1000.0),
       'HydrogenChloride / –•–ª–æ—Ä–æ–≤–æ–¥–æ—Ä–æ–¥': ('HydrogenChloride', 680000000.0, 670.0),
       'HydrogenSulfide / –°–µ—Ä–æ–≤–æ–¥–æ—Ä–æ–¥': ('HydrogenSulfide', 170000000.0, 760.0),
       'IsoButane/ –ò–∑–æ–±—É—Ç–∞–Ω': ('IsoButane', 35000000.0, 575.0),
       'IsoButene / –ò–∑–æ–±—É—Ç–∏–ª–µ–Ω': ('IsoButene', 50000000.0, 550.0),
       'Isohexane / 2-–º–µ—Ç–∏–ª–ø–µ–Ω—Ç–∞–Ω': ('Isohexane', 1000000000.0, 550.0),
       'Isopentane / –ò–∑–æ–ø–µ–Ω—Ç–∞–Ω': ('Isopentane', 1000000000.0, 500.0),
       'Krypton / –ö—Ä–∏–ø—Ç–æ–Ω': ('Krypton', 200000000.0, 750.0),
       'MD2M / –î–µ–∫–∞–º–µ—Ç–∏–ª—Ü–∏–∫–ª–æ–ø–µ–Ω—Ç–∞—Å–∏–ª–æ–∫—Å–∞–Ω': ('MD2M', 130000000.0, 600.0),
       'MD3M / Dodecamethylpentasiloxane': ('MD3M', 125000000.0, 673.0),
       'MD4M / Tetradecamethylhexasiloxane': ('MD4M', 125000000.0, 655.0),
       'MDM / Octamethyltrisiloxane': ('MDM', 130000000.0, 575.0),
       'MM / –ì–µ–∫—Å–∞–º–µ—Ç–∏–ª–¥–∏—Å–∏–ª–æ–∫—Å–∞–Ω': ('MM', 30000000.0, 673.0),
       'Methane / –ú–µ—Ç–∞–Ω': ('Methane', 1000000000.0, 625.0),
       'Methanol / –ú–µ—Ç–∞–Ω–æ–ª': ('Methanol', 500000000.0, 620.0),
       'MethylLinoleate / MethylLinoleate': ('MethylLinoleate', 50000000.0, 1000.0),
       'MethylOleate / –ú–µ—Ç–∏–ª–æ–ª–µ–∞—Ç': ('MethylOleate', 50000000.0, 1000.0),
       'MethylPalmitate / –ú–µ—Ç–∏–ª–ø–∞–ª—å–º–∏—Ç–∞—Ç': ('MethylPalmitate', 50000000.0, 1000.0),
       'MethylStearate / –ú–µ—Ç–∏–ª—Å—Ç–µ–∞—Ä–∞—Ç': ('MethylStearate', 50000000.0, 1000.0),
       'Neon / –ù–µ–æ–Ω': ('Neon', 1000000000.0, 725.0),
       'Neopentane / –ù–µ–æ–ø–µ–Ω—Ç–∞–Ω': ('Neopentane', 200000000.0, 550.0),
       'Nitrogen / –ê–∑–æ—Ç': ('Nitrogen', 2200000000.0, 2000.0),
       'NitrousOxide / –û–∫—Å–∏–¥ –∞–∑–æ—Ç–∞': ('NitrousOxide', 50000000.0, 525.0),
       'Novec649 / Novec 649': ('Novec649', 50000000.0, 500.0),
       'OrthoDeuterium / OrthoDeuterium': ('OrthoDeuterium', 2000000000.0, 600.0),
       'OrthoHydrogen / OrthoHydrogen': ('OrthoHydrogen', 2000000000.0, 1000.0),
       'Oxygen / –ö–∏—Å–ª–æ—Ä–æ–¥': ('Oxygen', 80000000.0, 2000.0),
       'ParaDeuterium / ParaDeuterium': ('ParaDeuterium', 2000000000.0, 600.0),
       'ParaHydrogen / ParaHydrogen': ('ParaHydrogen', 2000000000.0, 1000.0),
       'Propylene / –ü—Ä–æ–ø–∏–ª–µ–Ω': ('Propylene', 1000000000.0, 575.0),
       'Propyne / –ü—Ä–æ–ø–∏–Ω': ('Propyne', 31800000.0, 474.0),
       'R11 / R11': ('R11', 100000000.0, 625.0),
       'R113 / R113': ('R113', 200000000.0, 525.0),
       'R114 / R114': ('R114', 21000000.0, 507.0),
       'R115 / R115': ('R115', 60000000.0, 550.0),
       'R116 / R116': ('R116', 50000000.0, 425.0),
       'R12 / R12': ('R12', 200000000.0, 525.0),
       'R123 / R123': ('R123', 76000000.0, 600.0),
       'R1233zd(E) / R1233zd(E)': ('R1233zd(E)', 100000000.0, 550.0),
       'R1234yf / R1234yf': ('R1234yf', 30000000.0, 410.0),
       'R1234ze(E) / R1234ze(E)': ('R1234ze(E)', 15000000.0, 420.0),
       'R1234ze(Z) / R1234ze(Z)': ('R1234ze(Z)', 34000000.0, 440.0),
       'R124 / R124': ('R124', 40000000.0, 470.0),
       'R1243zf / R1243zf': ('R1243zf', 30000000.0, 410.0),
       'R125 / R125': ('R125', 60000000.0, 500.0),
       'R13 / R13': ('R13', 50000000.0, 450.0),
       'R134a / R134a': ('R134a', 70000000.0, 455.0),
       'R13I1 / R13I1': ('R13I1', 50000000.0, 420.0),
       'R14 / R14': ('R14', 51000000.0, 623.0),
       'R141b / R141b': ('R141b', 400000000.0, 500.0),
       'R142b / R142b': ('R142b', 60000000.0, 470.0),
       'R143a / R143a': ('R143a', 150000000.0, 650.0),
       'R152A / R152A': ('R152A', 58000000.0, 500.0),
       'R161 / R161': ('R161', 50000000.0, 450.0),
       'R21 / R21': ('R21', 138000000.0, 473.0),
       'R218 / R218': ('R218', 20000000.0, 440.0),
       'R22 / R22': ('R22', 60000000.0, 550.0),
       'R227EA / R227EA': ('R227EA', 60000000.0, 475.0),
       'R23 / R23': ('R23', 120000000.0, 475.0),
       'R236EA / R236EA': ('R236EA', 6000000.0, 412.0),
       'R236FA / R236FA': ('R236FA', 70000000.0, 400.0),
       'R245ca / R245ca': ('R245ca', 10000000.0, 450.0),
       'R245fa / R245fa': ('R245fa', 200000000.0, 440.0),
       'R32 / R32': ('R32', 70000000.0, 435.0),
       'R365MFC / R365MFC': ('R365MFC', 35000000.0, 500.0),
       'R40 / –•–ª–æ—Ä–º–µ—Ç–∞–Ω': ('R40', 100000000.0, 730.0),
       'R404A / R404A': ('R404A', 50000000.0, 500.0),
       'R407C / R407C': ('R407C', 50000000.0, 500.0),
       'R41 / R41': ('R41', 70000000.0, 425.0),
       'R410A / R410A': ('R410A', 50000000.0, 500.0),
       'R507A / R507A': ('R507A', 50000000.0, 500.0),
       'RC318 / RC318': ('RC318', 60000000.0, 623.0),
       'SES36 / SES36': ('SES36', 50000000.0, 725.0),
       'SulfurDioxide / –û–∫—Å–∏–¥ —Å–µ—Ä—ã(IV)': ('SulfurDioxide', 35000000.0, 525.0),
       'SulfurHexafluoride / –§—Ç–æ—Ä–∏–¥ —Å–µ—Ä—ã (VI)': ('SulfurHexafluoride', 150000000.0, 625.0),
       'Toluene / –¢–æ–ª—É–æ–ª': ('Toluene', 50000000.0, 700.0),
       'Water / –í–æ–¥–∞': ('Water', 1000000000.0, 2000.0),
       'Xenon / –ö—Å–µ–Ω–æ–Ω': ('Xenon', 700000000.0, 750.0),
       'cis-2-Butene / cis-2-Butene': ('cis-2-Butene', 50000000.0, 525.0),
       'm-Xylene / m-–ö—Å–∏–ª–æ–ª': ('m-Xylene', 200000000.0, 700.0),
       'n-Butane / n-–ë—É—Ç–∞–Ω': ('n-Butane', 12000000.0, 575.0),
       'n-Decane / n-–î–µ–∫–∞–Ω': ('n-Decane', 800000000.0, 675.0),
       'n-Dodecane / n-–î–æ–¥–µ–∫–∞–Ω': ('n-Dodecane', 200000000.0, 700.0),
       'n-Heptane / n-–ì–µ–ø—Ç–∞–Ω': ('n-Heptane', 100000000.0, 600.0),
       'n-Hexane / n-–ì–µ–∫—Å–∞–Ω': ('n-Hexane', 92000000.0, 600.0),
       'n-Nonane / n-–ù–æ–Ω–∞–Ω': ('n-Nonane', 800000000.0, 600.0),
       'n-Octane / n-–û–∫—Ç–∞–Ω': ('n-Octane', 1000000000.0, 730.0),
       'n-Pentane / n-–ü–µ–Ω—Ç–∞–Ω': ('n-Pentane', 780000000.0, 650.0),
       'n-Propane / n-–ü—Ä–æ–ø–∞–Ω': ('n-Propane', 1000000000.0, 650.0),
       'n-Undecane / n-–£–Ω–¥–µ–∫–∞–Ω': ('n-Undecane', 500000000.0, 700.0),
       'o-Xylene / o-–ö—Å–∏–ª–æ–ª': ('o-Xylene', 70000000.0, 700.0),
       'p-Xylene / p-–ö—Å–∏–ª–æ–ª': ('p-Xylene', 200000000.0, 700.0),
       'trans-2-Butene / –¢—Ä–∞–Ω—Å-2-–±—É—Ç–µ–Ω': ('trans-2-Butene', 50000000.0, 525.0)
       }
Subst = list(Sub.keys())


# —Ñ—É–Ω–∫—Ü–∏—è "–ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏" –æ—à–∏–±–æ–∫
def chek(funk):
    try:
        funk()
    except:
        "–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è"


# —Ç–µ–∫—Å—Ç
def text_1():
    st.write("""  """)
    st.write(""" –î–∞–≤–ª–µ–Ω–∏–µ """)
    st.write(""" –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ """)
    st.write("""  """)
    st.write(""" –£–¥–µ–ª—å–Ω–∞—è —ç–Ω—Ç–∞–ª—å–ø–∏—è """)
    st.write(""" –£–¥–µ–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è """)
    st.write(""" –°—Ç–µ–ø–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏ """)
    st.write("""  """)
    st.write(""" –£–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º """)
    st.write(""" –ü–ª–æ—Ç–Ω–æ—Å—Ç—å """)
    st.write(""" –£–¥–µ–ª—å–Ω–∞—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è """)
    st.write(""" –£–¥–µ–ª—å–Ω–∞—è –∏–∑–æ–±–∞—Ä–Ω–∞—è —Ç–µ–ø–ª–æ–µ–º–∫–æ—Å—Ç—å """)
    st.write(""" –£–¥–µ–ª—å–Ω–∞—è –∏–∑–æ—Ö–æ—Ä–Ω–∞—è —Ç–µ–ø–ª–æ–µ–º–∫–æ—Å—Ç—å """)
    st.write(""" –ö–æ—ç—Ñ. —Ç–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç–∏ """)
    st.write(""" –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –≤—è–∑–∫–æ—Å—Ç—å """)
    st.write(""" –ö–∏–Ω–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—è–∑–∫–æ—Å—Ç—å """)
    st.write(""" –ß–∏—Å–ª–æ –ü—Ä–∞–Ω–¥—Ç–ª—è""")
    st.write("""  """)
    st.write(""" –°–∫–æ—Ä–æ—Å—Ç—å –∑–≤—É–∫–∞""")
    st.write(""" –ö–æ—ç—Ñ. –∏–∑–æ—ç–Ω—Ç—Ä–æ–ø—ã """)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def Cool(inp_1, inp_2):
    st.subheader('–°–≤–æ–π—Å—Ç–≤–∞')
    # –î–∞–≤–ª–µ–Ω–∏–µ
    if par_1 == "p - –¥–∞–≤–ª–µ–Ω–∏–µ, –ú–ü–∞" or par_2 == "p - –¥–∞–≤–ª–µ–Ω–∏–µ, –ú–ü–∞":
        if par_1 == "p - –¥–∞–≤–ª–µ–Ω–∏–µ, –ú–ü–∞":
            st.write(""" p = """ + str('{:.6}'.format(inp_1 / 10 ** 6)) + " –ú–ü–∞")
        if par_2 == "p - –¥–∞–≤–ª–µ–Ω–∏–µ, –ú–ü–∞":
            st.write(""" p = """ + str('{:.6}'.format(inp_2 / 10 ** 6)) + " –ú–ü–∞")
    else:
        f = lambda: st.write(""" p = """ + str('{:.6}'.format((CP.PropsSI('P', Parametr[par_1][1], inp_1,
                                                                          Parametr[par_2][1], inp_2,
                                                                          Sub[page1][0])) / 10 ** 6)) + " –ú–ü–∞")
        chek(f)
    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    if par_1 == "t - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C" or par_2 == "t - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C":
        if par_1 == "t - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C":
            st.write(""" t = """ + str('{:.6}'.format(inp_1 - 273.15)) + " ¬∞C")
        if par_2 == "t - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C":
            st.write(""" t = """ + str('{:.6}'.format(inp_2 - 273.15)) + " ¬∞C")
    else:
        f = lambda: st.write(""" t = """ + str('{:.6}'.format((CP.PropsSI('T', Parametr[par_1][1], inp_1,
                                                                          Parametr[par_2][1], inp_2,
                                                                          Sub[page1][0])) - 273.15)) + " ¬∞C")
        chek(f)

    st.write("""  """)

    # –≠–Ω—Ç–∞–ª—å–ø–∏—è
    if par_1 == "h - —ç–Ω—Ç–∞–ª—å–ø–∏—è, –∫–î–∂/–∫–≥" or par_2 == "h - —ç–Ω—Ç–∞–ª—å–ø–∏—è, –∫–î–∂/–∫–≥":
        if par_1 == "h - —ç–Ω—Ç–∞–ª—å–ø–∏—è, –∫–î–∂/–∫–≥":
            st.write(""" h = """ + str('{:.6}'.format(inp_1 / 1000)) + " ¬∞C")
        if par_2 == "h - —ç–Ω—Ç–∞–ª—å–ø–∏—è, –∫–î–∂/–∫–≥":
            st.write(""" h = """ + str('{:.6}'.format(inp_2 / 1000)) + " ¬∞C")
    else:
        f = lambda: st.write(""" h = """ + str('{:.6}'.format((CP.PropsSI('H', Parametr[par_1][1], inp_1,
                                                                          Parametr[par_2][1], inp_2,
                                                                          Sub[page1][0])) / 1000)) + " –∫–î–∂/–∫–≥")
        chek(f)

    # –≠–Ω—Ç—Ä–æ–ø–∏—è
    if par_1 == "s - —ç–Ω—Ç—Ä–æ–ø–∏—è, –∫–î–∂/(–∫–≥*¬∞C)" or par_2 == "s - —ç–Ω—Ç—Ä–æ–ø–∏—è, –∫–î–∂/(–∫–≥*¬∞C)":
        if par_1 == "s - —ç–Ω—Ç—Ä–æ–ø–∏—è, –∫–î–∂/(–∫–≥*¬∞C)":
            st.write(""" s = """ + str('{:.6}'.format(inp_1 / 1000)) + " –∫–î–∂/(–∫–≥*¬∞C)")
        if par_2 == "s - —ç–Ω—Ç—Ä–æ–ø–∏—è, –∫–î–∂/(–∫–≥*¬∞C)":
            st.write(""" s = """ + str('{:.6}'.format(inp_2 / 1000)) + " –∫–î–∂/(–∫–≥*¬∞C)")
    else:
        f = lambda: st.write(""" s = """ + str('{:.6}'.format((CP.PropsSI('S', Parametr[par_1][1], inp_1,
                                                                          Parametr[par_2][1], inp_2,
                                                                          Sub[page1][0])) / 1000)) + " –∫–î–∂/(–∫–≥*¬∞C)")
        chek(f)

    # –°—Ç–µ–ø–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏
    if par_1 == "x - —Å—Ç–µ–ø–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏, %" or par_2 == "x - —Å—Ç–µ–ø–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏, %":
        if par_1 == "x - —Å—Ç–µ–ø–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏, %":
            st.write(""" x = """ + str('{:.6}'.format(inp_1 * 100)) + " %")
        if par_2 == "x - —Å—Ç–µ–ø–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏, %":
            st.write(""" x = """ + str('{:.6}'.format(inp_2 * 100)) + " %")
    else:
        try:
            X = ((CP.PropsSI('Q', Parametr[par_1][1], inp_1, Parametr[par_2][1], inp_2, Sub[page1][0])) * 100)
        except:
            X = 0

        if X != - 100:
            f = lambda: st.write(""" x = """ + str('{:.6}'.format((CP.PropsSI('Q', Parametr[par_1][1], inp_1,
                                                                              Parametr[par_2][1], inp_2,
                                                                              Sub[page1][0])) * 100)) + " %")
            chek(f)
        else:
            st.write("–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è")
    st.write("""  """)

    # –£–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º –∏ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
    if par_1 == "œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥" or par_2 == "œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥":
        if par_1 == "œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥":
            st.write(""" v  = """ + str('{:.6}'.format(1 / inp_1)) + " –º¬≥/–∫–≥")
            st.write(""" œÅ = """ + str('{:.6}'.format(inp_1)) + " –∫–≥/–º¬≥")
        if par_2 == "œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥":
            st.write(""" v  = """ + str('{:.6}'.format(1 / inp_2)) + " –º¬≥/–∫–≥")
            st.write(""" œÅ = """ + str('{:.6}'.format(inp_2)) + " –∫–≥/–º¬≥")
    else:
        f = lambda: st.write(""" v = """ + str('{:.6}'.format(
            1 / CP.PropsSI('D', Parametr[par_1][1], inp_1, Parametr[par_2][1], inp_2,
                           Sub[page1][0]))) + """ –º¬≥/–∫–≥""")
        chek(f)
        f = lambda: st.write(""" œÅ = """ + str('{:.6}'.format(
            (CP.PropsSI('D', Parametr[par_1][1], inp_1, Parametr[par_2][1], inp_2, Sub[page1][0])))) + " –∫–≥/–º¬≥")
        chek(f)

    # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è
    if par_1 == "u - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è, –∫–î–∂/–∫–≥" or par_2 == "u - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è, –∫–î–∂/–∫–≥":
        if par_1 == "u - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è, –∫–î–∂/–∫–≥":
            st.write(""" u = """ + str('{:.6}'.format(inp_1 / 1000)) + " –∫–î–∂/–∫–≥")
        if par_2 == "u - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è, –∫–î–∂/–∫–≥":
            st.write(""" u = """ + str('{:.6}'.format(inp_2 / 1000)) + " –∫–î–∂/–∫–≥")
    else:
        f = lambda: st.write(""" u = """ + str('{:.6}'.format((CP.PropsSI('U', Parametr[par_1][1], inp_1,
                                                                          Parametr[par_2][1], inp_2,
                                                                          Sub[page1][0])) / 1000)) + " –∫–î–∂/–∫–≥")
        chek(f)

    f = lambda: st.write(""" cp = """ + str('{:.6}'.format((CP.PropsSI('C', Parametr[par_1][1], inp_1,
                                                                       Parametr[par_2][1], inp_2,
                                                                       Sub[page1][0])) / 1000)) + " –∫–î–∂/(–∫–≥*¬∞C)")
    chek(f)

    f = lambda: st.write(""" cv = """ + str('{:.6}'.format((CP.PropsSI('O', Parametr[par_1][1], inp_1,
                                                                       Parametr[par_2][1], inp_2,
                                                                       Sub[page1][0])) / 1000)) + " –∫–î–∂/(–∫–≥*¬∞C)")
    chek(f)

    f = lambda: st.write(""" Œª = """ + str('{:.6}'.format((CP.PropsSI('conductivity', Parametr[par_1][1], inp_1,
                                                                      Parametr[par_2][1], inp_2,
                                                                      Sub[page1][0])))) + " –í—Ç/(–º*¬∞C)")
    chek(f)

    f = lambda: st.write(""" Œº = """ + str('{:.6}'.format(
        (CP.PropsSI('viscosity', Parametr[par_1][1], inp_1, Parametr[par_2][1], inp_2, Sub[page1][0])))) + " –ü–∞*—Å")
    chek(f)

    # –ö–∏–Ω. –≤—è–∑–∫–æ—Å—Ç—å
    if par_1 == "œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥" or par_2 == "œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥":
        if par_1 == "œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥":
            st.write(""" ŒΩ  = """ + str('{:.6}'.format((CP.PropsSI('viscosity', Parametr[par_1][1], inp_1,
                                                                   Parametr[par_2][1], inp_2,
                                                                   Sub[page1][0])) / inp_1)) + " –º¬≤/—Å")
        if par_2 == "œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥":
            st.write(""" ŒΩ  = """ + str('{:.6}'.format((CP.PropsSI('viscosity', Parametr[par_1][1], inp_1,
                                                                   Parametr[par_2][1], inp_2,
                                                                   Sub[page1][0])) / inp_2)) + " –º¬≤/—Å")
    else:
        f = lambda: st.write(""" ŒΩ = """ + str('{:.6}'.format(
            (CP.PropsSI('viscosity', Parametr[par_1][1], inp_1, Parametr[par_2][1], inp_2, Sub[page1][0])) / (
                CP.PropsSI('D', Parametr[par_1][1], inp_1, Parametr[par_2][1], inp_2, Sub[page1][0])))) + " –º¬≤/—Å")
        chek(f)

    f = lambda: st.write(""" Pr = """ + str('{:.6}'.format(
        (CP.PropsSI('Prandtl', Parametr[par_1][1], inp_1, Parametr[par_2][1], inp_2, Sub[page1][0])))) + " ")
    chek(f)
    st.write("""  """)

    f = lambda: st.write(""" w = """ + str('{:.6}'.format((CP.PropsSI('speed_of_sound', Parametr[par_1][1], inp_1,
                                                                      Parametr[par_2][1], inp_2,
                                                                      Sub[page1][0])))) + " –º/—Å")
    chek(f)

    f = lambda: st.write(""" k = """ + str('{:.6}'.format((CP.PropsSI('isentropic_expansion_coefficient',
                                                                      Parametr[par_1][1], inp_1, Parametr[par_2][1],
                                                                      inp_2, Sub[page1][0])))) + " ")
    chek(f)


# –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
with st.sidebar:
    page1 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—â–µ—Å—Ç–≤–æ", Subst)
    tab1, tab2 = st.tabs(["–ù–∞—Å—Ç—Ä–æ–π–∫–∏", " "])
    with tab1:
        st.write(Sub[page1][0])
        st.write("#")
        Vers()
        st.write("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ " + "[Github](https://github.com/tederix/WSP)")

Parametr = {'p - –¥–∞–≤–ª–µ–Ω–∏–µ, –ú–ü–∞': ('–í–≤–µ–¥–∏—Ç–µ –¥–∞–≤–ª–µ–Ω–∏–µ p, –ú–ü–∞', 'P'),
            't - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C': ('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É t, ¬∞C', 'T'),
            'h - —ç–Ω—Ç–∞–ª—å–ø–∏—è, –∫–î–∂/–∫–≥': ('–í–µ–¥–∏—Ç–µ —ç–Ω—Ç–∞–ª—å–ø–∏—é h, –∫–î–∂/–∫–≥', 'H'),
            's - —ç–Ω—Ç—Ä–æ–ø–∏—è, –∫–î–∂/(–∫–≥*¬∞C)': ('–í–µ–¥–∏—Ç–µ —ç–Ω—Ç—Ä–æ–ø–∏—é s, –∫–î–∂/(–∫–≥*¬∞C)', 'S'),
            'u - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —ç–Ω–µ—Ä–≥–∏—è, –∫–î–∂/–∫–≥': ('–í–µ–¥–∏—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —ç–Ω–µ—Ä–≥–∏—é u, –∫–î–∂/–∫–≥', 'U'),
            'œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥': ('–í–µ–¥–∏—Ç–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç—å œÅ, –∫–≥/–º¬≥', 'D'),
            'x - —Å—Ç–µ–ø–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏, %': ('–í–µ–¥–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏, %', 'Q')
            }
Par = list(Parametr.keys())

col1, col2 = st.columns(2)
with col1:
    par_1 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ 1-—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä", Par, index=0, key=1)
    par_2 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ 2-–æ–π –∏—Å—Ö–æ–¥–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä", Par, index=1, key=2)
with col2:
    if par_1 == par_2:
        st.write("##### –í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
    else:
        match par_1:
            case "p - –¥–∞–≤–ª–µ–Ω–∏–µ, –ú–ü–∞":
                inp_1 = st.number_input(Parametr[par_1][0], max_value=(Sub[page1][1]) / 10 ** 6)
                inp_1 = inp_1 * 10 ** 6
            case "t - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C":
                inp_1 = st.number_input(Parametr[par_1][0], max_value=(Sub[page1][2]) - 273.15)
                inp_1 = inp_1 + 273.15
            case "x - —Å—Ç–µ–ø–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏, %":
                inp_1 = st.number_input(Parametr[par_1][0], max_value=100, min_value=0)
                inp_1 = inp_1 / 100
            case "œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥":
                inp_1 = st.number_input(Parametr[par_1][0])
            case _:
                inp_1 = st.number_input(Parametr[par_1][0])
                inp_1 = inp_1 * 1000

        match par_2:
            case "p - –¥–∞–≤–ª–µ–Ω–∏–µ, –ú–ü–∞":
                inp_2 = st.number_input(Parametr[par_2][0], max_value=(Sub[page1][1]) / 10 ** 6)
                int_2 = inp_2 * 10 ** 6
            case "t - —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C":
                inp_2 = st.number_input(Parametr[par_2][0], max_value=(Sub[page1][2]) - 273.15)
                inp_2 = inp_2 + 273.15
            case "x - —Å—Ç–µ–ø–µ–Ω—å —Å—É—Ö–æ—Å—Ç–∏, %":
                inp_2 = st.number_input(Parametr[par_2][0], max_value=100, min_value=0)
                inp_2 = inp_2 / 100
            case "œÅ - –ø–ª–æ—Ç–Ω–æ—Å—Ç—å, –∫–≥/–º¬≥":
                inp_2 = st.number_input(Parametr[par_2][0])
            case _:
                inp_2 = st.number_input(Parametr[par_2][0])
                inp_2 = inp_2 * 1000

if par_1 == par_2:
    st.write("### –í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")

if par_1 != par_2:
    col1_1, col2_2 = st.columns(2)
    with col1_1:
        Cool(inp_1, inp_2)
    with col2_2:
        with st.expander("–ù–∞–∑–≤–∞–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤", expanded=True):
            text_1()
